#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('expressjs-boilerplate:server');
var http = require('http');
const { Server } = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


const io = new Server(server, {
    cors: {
        origin: "*", // Nastav podle potřeby
    }
});

// Přidáme WebSocket logiku
io.on("connection", (socket) => {
    console.log("⚡ Nový hráč připojen!");

    socket.on("joinGame", ({ gameId, playerId }) => {
        socket.join(gameId);
        console.log(`✅ Hráč ${playerId} připojen do hry ${gameId}`);

        // Pošli informaci o hráčích
        io.to(gameId).emit("playerJoined", { playerId });

        // Pokud už jsou dva hráči, zahájíme hru
        const clients = io.sockets.adapter.rooms.get(gameId);
        if (clients && clients.size === 2) {
            io.to(gameId).emit("startGame");
        }
    });

    socket.on("makeMove", ({ gameId, x, y, symbol }) => {
        io.to(gameId).emit("updateBoard", { x, y, symbol });
    });

    socket.on("disconnect", () => {
        console.log("❌ Hráč odpojen");
    });
});

// Uložíme io do app.js, aby bylo dostupné v routerech
app.set("io", io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
